from pathlib import Path
import fwbuild
import fwbuild.ninja_syntax
import sys

class ninja_writer(fwbuild.ninja_syntax.Writer):
    def __init__(self, filename: str | Path, width=78):
        super().__init__(None, width)
        self.filename = Path(filename)
        self.file = None

    def __enter__(self):
        self.filename.parent.mkdir(parents=True, exist_ok=True)
        self.output = open(self.filename, "w")
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.output.close()


def write_subninja(platform: "fwbuild.platform_base",
                   target: "fwbuild.cxx_module", filename: Path, topout: Path):
    if isinstance(target, fwbuild.cxx_app):
        pass
    elif isinstance(target, fwbuild.cxx_module):
        return None
    else:
        raise RuntimeError(f'"{target}" has unexpected class {type(target)}')

    with ninja_writer(filename) as w:
        return platform.build_cxx_app(topout, target, w)


def ninja(platform: "fwbuild.platform_base", buildfile_name: str | Path):
    build_artifacts = {}

    buildfile_name = Path(buildfile_name)
    builddir = buildfile_name.parent
    builddir.mkdir(parents=True, exist_ok=True)

    with open(buildfile_name, "w") as buildfile:
        w = fwbuild.ninja_syntax.Writer(buildfile)
        w.comment("DO NOT EDIT THIS FILE")
        w.comment("It is automatically generated by fwbuild using")
        w.comment(sys.modules["__main__"].__file__)
        w.newline()

        w.variable("topdir", fwbuild.topdir.as_posix())
        w.newline()

        tests = []

        for target in platform.targets:
            name = Path(buildfile_name.parent, target.name,
                f"{target.name}-build.ninja")

            artifacts = write_subninja(platform, target, name, builddir)
            if artifacts is not None:
                build_artifacts[target] = artifacts
                w.subninja(f"{target.name}/{target.name}-build.ninja")
                if isinstance(target, fwbuild.cxx_gtest):
                    tests.append(artifacts)
        w.newline()

        if tests:
            cmd = fwbuild.shellcmd()
            inputs = []
            for test in tests:
                cmd.cmd(test.app)
                inputs.append(test.app.as_posix())

            w.comment("Run all tests")
            w.rule("test", command=cmd, description="run tests")
            w.build("test", "test", inputs)
            w.newline()

        w.comment("Regenerate build files if configuration script changed")
        conf_cmd = fwbuild.shellcmd()
        conf_cmd.cd(Path.cwd())
        conf_cmd.cmd(sys.executable, *sys.argv)

        main = Path(sys.modules["__main__"].__file__)
        w.rule("configure", command=conf_cmd, generator=True,
                description=main.name, depfile="build.ninja.deps")
        w.build("build.ninja", "configure")

    # Write dependencies
    with open(builddir / "build.ninja.deps", "w") as f:
        f.write(buildfile_name.name + ": \\\n")
        for dep in fwbuild.deps:
            f.write(f"  {dep.as_posix()} \\\n")
        f.write("\n")
        for dep in fwbuild.deps:
                f.write(f"{dep.as_posix()}:\n\n")

    return build_artifacts
